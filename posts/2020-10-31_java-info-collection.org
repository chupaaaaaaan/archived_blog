---
title: 個人的Java情報まとめ
published: 2020-11-01 02:10:24
updated: 2020-11-02 19:18:33
tags: java
---
#+OPTIONS: ^:{}
#+OPTIONS: \n:t

お仕事でJavaを書いていて、いつもわからん、となってしまうので、勉強を兼ねて、自分用のまとめ記事を作ってみる（と言ってもまだMavenだけ・・・）。
とりあえず雑多に放り込んで、収拾つかなくなったら別記事にしたり、個別に記事を書くかも。

@@html:<!--more-->@@

* Maven
** [[https://qiita.com/opengl-8080/items/bb32732f9aa5cb3495d2][Mavenの基本勉強メモ]]
   - Mavenでわからんことがあったら、とりあえずここを読む。

** [[https://maven.apache.org/guides/index.html][Maven documentation: Index]]
   - なかなかドキュメントの目次が見つからなかったので

** [[https://maven.apache.org/plugins/index.html][Mavenの公式プラグイン]]
   - よく使うプラグインもたくさん。

   - [[https://maven.apache.org/plugins/maven-dependency-plugin/][maven-dependency-plugin]]
     - 依存関係にあるアーティファクト表示したり、集めたりといろいろなことができる。
       - ~mvn dependency:resolve~ :: 依存関係を一覧表示する（エイリアス: ~dependency:resolve~ ）。

       - ~mvn dependency:resolve-plugins~ :: プラグインの依存関係を一覧表示する。

       - ~mvn dependency:list-repositories~ :: 使用されているリポジトリを一覧表示する。

       - ~mvn dependency:tree~ :: 依存関係をツリー状にして表示する。

       - ~mvn dependency:copy-dependencies~ :: 依存するアーティファクトを、 ~${project.build.directory}/dependency~ に収集する。

       - ~mvn dependency:build-classpath~ ::  ~java~ コマンドの ~-cp~ オプションに渡せる形式（クラスパス形式）で、依存するアーティファクトのパスを表示する（ローカルリポジトリ内）。

       - ~mvn dependency:purge-local-repository~ :: ローカルリポジトリから、依存するアーティファクトを削除し、必要に応じて再解決する。

   - [[https://maven.apache.org/plugins/maven-resources-plugin/copy-resources-mojo.html][maven-resources-plugin]]

   - [[https://maven.apache.org/plugins/maven-jdeps-plugin/][maven-jdeps-plugin]]
     - [[https://docs.oracle.com/javase/jp/9/tools/jdeps.htm][jdeps]]をMavenプロジェクトで使用するためのツール。

   - プラグインの自作
     - 割と簡単に作れるっぽい。
       提供されてるプラグインをなんとか組み合わせてがんばる・・・とするくらいなら、必要な処理をするプラグインを作った方が早いかも。

     - [[https://www.slideshare.net/kawasima/maven-196821326][参考]]


** [[https://qiita.com/rubytomato@github/items/8b159a9e4376bbe04d0b][ビルドライフサイクルについて]]
   - ~clean~ , ~default~ , ~site~ が、ビルトインなライフサイクル。
     - ~site~ は使われてるの見たことない・・・

   - 各ライフサイクルはいくつかのフェーズから構成されている。

     #+CAPTION:  ~default~ ライフサイクルのフェーズ
     | Phase                     | Description                                                                                                                                             |
     |---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------|
     | ~validate~                | validate the project is correct and all necessary information is available.                                                                             |
     | ~initialize~              | initialize build state, e.g. set properties or create directories.                                                                                      |
     | ~generate-sources~        | generate any source code for inclusion in compilation.                                                                                                  |
     | ~process-sources~         | process the source code, for example to filter any values.                                                                                              |
     | ~generate-resources~      | generate resources for inclusion in the package.                                                                                                        |
     | ~process-resources~       | copy and process the resources into the destination directory, ready for packaging.                                                                     |
     | ~compile~                 | compile the source code of the project.                                                                                                                 |
     | ~process-classes~         | post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.                                              |
     | ~generate-test-sources~   | generate any test source code for inclusion in compilation.                                                                                             |
     | ~process-test-sources~    | process the test source code, for example to filter any values.                                                                                         |
     | ~generate-test-resources~ | create resources for testing.                                                                                                                           |
     | ~process-test-resources~  | copy and process the resources into the test destination directory.                                                                                     |
     | ~test-compile~            | compile the test source code into the test destination directory                                                                                        |
     | ~process-test-classes~    | post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes.                                         |
     | ~test~                    | run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.                                     |
     | ~prepare-package~         | perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. |
     | ~package~                 | take the compiled code and package it in its distributable format, such as a JAR.                                                                       |
     | ~pre-integration-test~    | perform actions required before integration tests are executed. This may involve things such as setting up the required environment.                    |
     | ~integration-test~        | process and deploy the package if necessary into an environment where integration tests can be run.                                                     |
     | ~post-integration-test~   | perform actions required after integration tests have been executed. This may including cleaning up the environment.                                    |
     | ~verify~                  | run any checks to verify the package is valid and meets quality criteria.                                                                               |
     | ~install~                 | install the package into the local repository, for use as a dependency in other projects locally.                                                       |
     | ~deploy~                  | done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.        |
     @@html:<br>@@

     #+CAPTION: ~clean~ ライフサイクルのフェーズ
     | Phase        | Description                                                   |
     |--------------+---------------------------------------------------------------|
     | ~pre-clean~  | execute processes needed prior to the actual project cleaning |
     | ~clean~      | remove all files generated by the previous build              |
     | ~post-clean~ | execute processes needed to finalize the project cleaning     |
     @@html:<br>@@

** [[https://maven.apache.org/pom.html][POMの構造]]
   - ~pom.xml~ で、どこにどんなことが書いてあるか（特に依存関係）があまり解ってなかったので、よく使う（よく見る）要素を書いてみる。
   
   - 基本的な設定
     - ~<moduleVersion>~  :: 必須。 ~4.0.0~ 固定。

     - ~<groupId>~ , ~<artifactId>~ , ~<version>~  :: 必須。

     - ~<packaging>~ :: 省略したら ~jar~ が設定される。使用するパッケージングにより、 ~default~ ライフサイクルの各フェースに紐づけられるゴールが異なる（[[https://maven.apache.org/ref/3.6.3/maven-core/default-bindings.html][参考]]）。

     - ~<dependencies>~  :: 子要素は ~<dependency>~ 要素のリストで、ここにプロジェクトの依存関係を記載する。

     - ~<parent>~  :: POMを継承する場合、親となるPOMの情報を記載する。親POMでは ~<dependencyManagement>~ で子プロジェクトが ~<dependency>~ として設定するアーティファクトのバージョンを指定したりできる。[[https://qiita.com/syogi_wap/items/432bbdbe9892eb05e122][BOM]]も参照。

     - ~<properties>~  :: 独自の変数を定義することができる。POM内から、 ~${hoge.fuga}~ のように参照できる。システムプロパティで変更することができる。以下は特殊なプロパティ。
       - ~env.X~ : 環境変数 ~X~ を参照。

       - ~project.x~ : POM内 ~<project>~ 要素からの対応する要素の値を参照。

       - ~settings.x~ : ~$HOME/.m2/settings.xml~ 内の対応する要素の値を参照。

   - ビルド用の設定。 ~<project>~ 直下の ~<build>~ 要素の中に記載する。
     - ~<resources>~ , ~<testResources>~  :: 子要素は ~<resource>~ 要素/ ~<testResource>~ 要素のリストで、process-resourcesフェーズ及びprocess-test-resourcesフェーズでリソースファイルを収集する対象のディレクトリを追加する。
       ~${basedir}/src/main/resources~ , ~${basedir}/src/test/resources~ はデフォルトの収集対象ディレクトリとなっている。

     - ~<pluginManagement>~  :: 親POMで、この中にプラグインの設定を記載しておく。
       子プロジェクトが親POMを継承すると、使用するプラグインを指定するだけで記載した設定でプラグインを使用できる。
       ~<dependencyManagement>~ と同じような使用方法。

     - ~<plugins>~  :: 子要素は ~<plugin>~ 要素のリストで、ビルド時に使用するプラグインの設定を記載する。
       - ~<configuration>~ : プラグイン固有の設定を記載する。

       - ~<executions>~ : 子要素は ~<execution>~ 要素のリストで、ビルドライフサイクルのフェーズとプラグインのゴールを紐付ける。紐づけておくと、そのフェーズを実行した時に紐づいたゴールが実行される。

       - ~<dependencies>~ : 子要素は ~<dependency>~ 要素のリストで、プラグインの依存関係を変更する（不要なruntime依存性を削除したり、バージョンを変更したりなど）。

       - ~<extensions>~ : これはどう使うのかよくわからない・・・

       - ビルド用のソースディレクトリ・アウトプットディレクトリは、親POMもしくはSuper POMから継承されるが、以下で変更することもできる。
         - ~<sourceDirectory>~
         - ~<testSourceDirectory>~
         - ~<outputDirectory>~
         - ~<testOutputDirectory>~

   - リポジトリの設定。 ~<project>~ 直下の ~<repositories>~ 要素に、各リポジトリ設定を記載する。
