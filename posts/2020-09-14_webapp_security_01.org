---
title: Webアプリケーションセキュリティ - クロスサイト・スクリプティング（XSS）
published: 2020-09-14 10:10:33
tags: security
---
#+OPTIONS: ^:{}

会社の金で勉強できるぞ！ということで、普段なかなか触る機会のないセキュリティについて勉強する。
特に、よくある脆弱性とその対策方法を、サンプルコード等を用いた攻撃を通して理解したい。

この記事では、クロスサイト・スクリプティングについて、概要と基本的な対策について記載する。

なお、今回学習に使用する資料はこちら。
- [[https://www.amazon.co.jp/%25E4%25BD%2593%25E7%25B3%25BB%25E7%259A%2584%25E3%2581%25AB%25E5%25AD%25A6%25E3%2581%25B6-%25E5%25AE%2589%25E5%2585%25A8%25E3%2581%25AAWeb%25E3%2582%25A2%25E3%2583%2597%25E3%2583%25AA%25E3%2582%25B1%25E3%2583%25BC%25E3%2582%25B7%25E3%2583%25A7%25E3%2583%25B3%25E3%2581%25AE%25E4%25BD%259C%25E3%2582%258A%25E6%2596%25B9-%25E7%25AC%25AC2%25E7%2589%2588-%25E8%2584%2586%25E5%25BC%25B1%25E6%2580%25A7%25E3%2581%258C%25E7%2594%259F%25E3%2581%25BE%25E3%2582%258C%25E3%2582%258B%25E5%258E%259F%25E7%2590%2586%25E3%2581%25A8%25E5%25AF%25BE%25E7%25AD%2596%25E3%2581%25AE%25E5%25AE%259F%25E8%25B7%25B5-%25E5%25BE%25B3%25E4%25B8%25B8/dp/4797393165/ref=tmm_hrd_swatch_0?_encoding=UTF8&qid=&sr=][体系的に学ぶ 安全なWebアプリケーションの作り方 第2版 脆弱性が生まれる原理と対策の実践]]
- [[https://www.ipa.go.jp/files/000017316.pdf][安全なウェブサイトの作り方]] （IPA）

* XSSとは？なんじゃらほい
  IPA「[[https://www.ipa.go.jp/files/000017316.pdf][安全なウェブサイトの作り方]] - 1.5 クロスサイト・スクリプティング」は、以下の記載がある。
  #+begin_quote
  ウェブアプリケーションにスクリプトを埋め込むことが可能な脆弱性がある場合、これを悪用した攻撃により、利用者のブラウザ上で不正なスクリプトが実行されてしまう可能性があります。
  #+end_quote
  
  「スクリプトを埋め込むことが可能な脆弱性」がどこにあるかによるが、
  大雑把に言えば、脆弱なウェブアプリケーションには、以下のようにしてスクリプトを埋め込むことができる。

  1. GETリクエストのパラメータ、もしくはPOSTリクエストではフォームを利用して、攻撃用の文字列をウェブアプリケーションに送信する。
     攻撃用の文字列は、 ~<script>~ タグで囲まれたJavascriptや、偽サイトのHTMLなどである（他にもあると思う）。
  2. ウェブアプリケーションは、受け取った文字列から動的にHTMLを構築する。
     その際、ウェブアプリケーションが受け取った文字列をサニタイズせずに使用した場合、構築したHTMLに攻撃用の文字列が紛れ込むことになってしまう。


  Javascriptが埋め込めてしまうと、ウェブブラウザ上でできることは何でもできてしまうため、例えば
  
  - セッションIDの窃取
  - 閲覧者の情報を送信
    
    
  などは簡単にできてしまう。
  また、偽サイトで、本物サイトと同じ見た目のフォームを作成しておけば、攻撃者に対して入力値をPOSTすることもできてしまう。
  この攻撃は、閲覧者がJavascriptを無効としていても、なお有効な攻撃となる。

  実際には、脆弱性のあるウェブサイトには任意のJavascriptコードを埋め込むことができるため、まさに「やりたい放題」である。
  ページを表示しただけで、即座に攻撃者へ情報を送信してしまうことも可能だ。

  脆弱性のあるウェブサイトへの誘導方法としては、例えば

  - 罠となるサイトを作成しておいて、SNS等で誘い込む（罠サイトを経由して、脆弱性のあるウェブサイトでJavascriptが生成される）
  - 脆弱性のある掲示板やSNS、ブログサイトのコメント欄を利用して、サイトにJavascript等を埋め込む


  などが考えられる。

* XSSへの対策
  詳細な話は書籍に譲るが、以下の2つが基本的な対策となる。

  1. レスポンスでの出力内容をエスケープする
  2. レスポンスでの文字エンコーディングを明示する

** 1について
   入力値の中にhtmlの構文で特別な意味を持つ文字が含まれていた場合に、それをそのままレンダリングしてしまうことを防ぐためにhtmlエスケープを行う。
   htmlによって解釈される文字と、出力場所の終端文字列について、エスケープが必要になる（引用元：書籍）。
   
   | No. | 入力値が出力される場所     | 説明                       | エスケープ概要                   | 備考                                 |
   |-----+----------------------------+----------------------------+----------------------------------+--------------------------------------|
   |   1 | 要素内容（通常のテキスト） | タグ、文字参照が解釈される | ~<~ ~&~ を文字参照にする         |                                      |
   |     |                            | 終端文字は ~<~             |                                  |                                      |
   |   2 | 属性値                     | 文字参照が解釈される       | 属性値を ~"~ で囲み、            |                                      |
   |     |                            | 終端文字は ~"~             | ~"~ ~<~ ~&~ を文字参照にする     |                                      |
   |   3 | 属性値（url）              | 同上                       | urlの形式を検査（https/http）    | ~href~ など                          |
   |     |                            |                            | してから、属性値としてエスケープ |                                      |
   |   4 | イベントハンドラ           | 同上                       | Javascriptとしてエスケープ       | ~<body>~ タグの ~onload~ 属性で      |
   |     |                            |                            | してから、属性値としてエスケープ | 呼び出す関数のパラメータなど         |
   |   5 | script要素内の             | タグ、文字参照とも解釈     | Javascriptとしてエスケープ       | ~<script>~ タグの内容を              |
   |     | 文字列リテラル             | されない。終端文字は ~</~  | 及び ~</~ が出現しないよう考慮   | 動的に生成する場合。できれば使わない |

** 2について  
   明示的に文字エンコーディングを指定していない場合、ブラウザ側が、レスポンス内容から文字エンコーディングを推測する。
   その時、（例えば）UTF-8で見れば問題ない入力内容でも、別のエンコーディングではhtmlに解釈される文字となってしまう場合がある。
   
   安全なウェブサイトの作り方から例を引用する。以下の文字列
   
   #+BEGIN_SRC text
   +ADw-script+AD4-alert(+ACI-test+ACI-)+ADsAPA-/script+AD4-
   #+END_SRC
   
   がhtml中に現れた場合、一部のブラウザは、エンコーディングをUTF-7と解釈する。
   これがUTF-7として画面に表示されると、
   
   #+BEGIN_SRC text
   <script>alert('test');</script>
   #+END_SRC
   
   として扱われるため、スクリプトが実行される。

** Thymeleafの例
  例として、Thyemleafでコードを記載してみる。

  #+BEGIN_SRC html
  <!DOCTYPE html>
  
  <html xmlns:th="http://www.thymeleaf.org">
  
  <head>
      <title>Input your information</title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
  
  <body>
      <form th:action="@{/confirm}" method="POST" th:object="${demoForm}">
          <input type="text" th:field="*{name}"></input>
          <input type="text" th:field="*{address}"></input>
          <button type="submit">送信</button>          
      </form>
  </body>
  </html>
  
  #+END_SRC

  #+BEGIN_SRC html
  <!DOCTYPE html>
  
  <html xmlns:th="http://www.thymeleaf.org">
  
  <head>
      <title>Confirm your information</title>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
  </head>
  
  <body>
      <div th:object="${demoForm}">
          <p th:text="*{name}"></p>
          <p th:text="*{address}"></p>
      </div>
  </body>
  </html>
  #+END_SRC

  最初の画面でフォームよりウェブアプリケーションに入力が渡され、アプリケーション内の ~DemoForm~ オブジェクトに格納されている。
  次の画面では、 ~DemoForm~ オブジェクトを出力している。
  ~th:text~ 属性を使用して値を表示する場合、値はデフォルトでhtmlエスケープされる（具体的には、~<~ ~>~ ~&~ ~"~ ~'~ が文字参照となる）。
  そのため、属性値に対するエスケープとしては問題がない。

  一方、 ~th:text~ の代わりに ~th:utext~ を使用した場合、中身の値はエスケープされないため、問題がある。
  例えば、 前画面で ~name~ パラメータに以下のような文字列を渡した場合を考える（書籍の記載例参照）。

  #+BEGIN_SRC javascript
  "+onmouseover%3d"alert(document.cockie)
  #+END_SRC

  ~th:utext~ を使用して表示していた場合、該当要素をマウスオーバーすると、ブラウザに保存されているcockieが表示されてしまう。

** 保険的対策
   上記の対策以外に、保険的対策として以下のことも実施できる。

   - ~X-XSS-Protection~ レスポンスヘッダの追加 :: 
        XSSフィルタを有効にする（閲覧者側の設定を上書きする）。
        ただし、最近のブラウザではContent Security Policy (CSP)への以降を見据え、XSSフィルタを無効化されつつある。
   - 入力値検証 :: 
              予め、不正な入力が紛れ込まないようにする。
              ただし、任意の文字列を受け取るような入力もあるため、これだけでセキュリティ対策にはならない。
   - クッキーに ~HttpOnly~ 属性を付与 :: 
        仮にJavascriptを埋め込まれても、Javascriptからはクッキーの読み出しができないようにする。
        それ以外の攻撃は、依然として有効。


* まとめ
  XSSは、入力値が「エスケープされないまま」で「HTMLとして出力」される脆弱性により発生する。
  そのため、基本的には出力前に値をエスケープしておくことで、脆弱性は潰すことができる。

  とはいえ、基本的にはアプリケーション側での対応になるので、処理一つ一つについてエスケープしているか、
  のレビューが必須になってくる（インフラ的な対策や、共通部品みたいなのでなんとかしづらそう）。
  こういうアプリケーションセキュリティの有識者って、結構重要な存在なんだなぁ、と思うなどした。
