---
title: Haskellで精進記録 - ABC165d
published: 2020-07-24 01:30:43
tags: haskell, 競プロ
---
#+OPTIONS: ^:{}
#+OPTIONS: \n:t

解いた問題の学びを書いていく（復習も兼ねて）。

今回の問題は[[https://atcoder.jp/contests/abc165/tasks/abc165_c][これ]]。テーマはまたしても全探索だが、どっちかというと再帰をちゃんと使おう、のほうが近いかも。

@@html:<!--more-->@@

** 最初に振り返り
   - 今回は方針が全く立たなかった。制約を見つつ、値が小さいときは何らかの全列挙（全探索）が使えないか見てみるのが良さそう。

   - 何かを全列挙する、としたときに、再帰的に構成することを頭に思い浮かべられるとよい。
     - 問題を小さく分割する癖をつけると、自然と再帰的な構成が浮かぶ？
     - 全探索というと、どうしてもまだループ的な発想が出てしまうなぁ・・・

** 解いてみる
   最初制約見ずにうんうん唸っていたが、かなり値が小さいのに気づく。
   とはいえ、何をすればよいかちょっと方針が立たなかったので、解説を見る。

   （最初、与えられた $Q$ 個の4つ組から適当な数列 $A$ が構成できるんかなーと思って、
   その方針でやろうとしたが、全く進展せず・・・）

   この問題では数列 $A$ 自体は与えられておらず、与えられた条件の下で任意に数列を構成できる。
   そのため、あり得る数列を全部列挙し、そのそれぞれについて得点を計算してやれば良い。

   得点については簡単で、以下のように計算できる。

   #+BEGIN_SRC haskell
   score :: [(Int,Int,Int,Int)] -> UArray Int Int -> Int
   score abcds seqA = foldr (\(a,b,c,d) x -> if seqA!b - seqA!a == c
                                             then x + d
                                             else x) 0 abcds
   #+END_SRC

   ~abcds~ は $Q$ 個の4つ組、 ~seqA~ は適当な数列 $A$ 。
   問題文のとおりに、すべての4つ組について得点の合計を計算する。（今思えば ~map~ して ~sum~ でも良かったな・・・）

   残りは数列 $A$ の全列挙だが、こちらがなかなかうまく行かなかった・・・

** 数列の全探索
   結論から言えば、[[https://atcoder.jp/contests/abc165/submissions/12627062][この提出]]を参考にさせていただいた。

   キモは、数列を再帰的に構成してあげることだ（この考え方がなかなか身につかない・・・）。

   実装は以下の通り。

   #+BEGIN_SRC haskell
   genSeqAs :: Int -> Int -> [[Int]]
   genSeqAs n m = go n 1
     where go 0 _   = [[]]
           go len p = [a:as | a <- [p..m], as <- go (len-1) a]
   #+END_SRC

   再帰自体は[[https://kazu-yamamoto.hatenablog.jp/entry/20171212/1513050147][goな関数]]として定義している。
   数列をCARとCDRに分けたとき、CDRのリストがすでに ~go~ によって構成されていると考え、そこから残りの数列を取り出している。
   この「すでに構成されている」と見ることは、[[https://github.com/kazu-yamamoto/recursion-drill/blob/master/drill/6.md][再帰のこころ]]そのものだ。

   #+begin_quote
   再帰のこころとは

     - 一歩手前ができているとすると次はどうする？

   だ。
   #+end_quote

   今回で言えば、CDRは長さが1短い数列で、その要素の最小値はCAR未満になることがない、という事実から実装を導くことができる。

** 最後に
   この記事を見ている人はいないと思うが、もし見ている人がいたら[[https://github.com/kazu-yamamoto/recursion-drill/blob/master/README.md][再帰ドリル]]を是非やってみてください。
   再帰のこころを身につけるために、とても良いコンテンツです。
